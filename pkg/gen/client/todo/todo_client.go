// Code generated by go-swagger; DO NOT EDIT.

package todo

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new todo API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for todo API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
AddTodo adds todo

the description of addTodo()
*/
func (a *Client) AddTodo(params *AddTodoParams) (*AddTodoOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddTodoParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "addTodo",
		Method:             "POST",
		PathPattern:        "/todo",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AddTodoReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*AddTodoOK), nil

}

/*
DeleteTodo deletes todo

the description of deleteTodo()
*/
func (a *Client) DeleteTodo(params *DeleteTodoParams) (*DeleteTodoOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteTodoParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteTodo",
		Method:             "DELETE",
		PathPattern:        "/todo/{todoID}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteTodoReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteTodoOK), nil

}

/*
ListTodos lists todos

the description of listTodos()
*/
func (a *Client) ListTodos(params *ListTodosParams) (*ListTodosOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListTodosParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listTodos",
		Method:             "GET",
		PathPattern:        "/todos",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListTodosReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ListTodosOK), nil

}

/*
UpdateTodo updates todo

the description of updateTodo()
*/
func (a *Client) UpdateTodo(params *UpdateTodoParams) (*UpdateTodoOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateTodoParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateTodo",
		Method:             "PUT",
		PathPattern:        "/todo",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateTodoReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateTodoOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
